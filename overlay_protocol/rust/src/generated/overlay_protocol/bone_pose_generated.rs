// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BonePoseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BonePose<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BonePose<'a> {
  type Inner = BonePose<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> BonePose<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_QUAT: flatbuffers::VOffsetT = 6;
  pub const VT_POS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BonePose { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BonePoseArgs<'args>
  ) -> flatbuffers::WIPOffset<BonePose<'bldr>> {
    let mut builder = BonePoseBuilder::new(_fbb);
    if let Some(x) = args.pos { builder.add_pos(x); }
    if let Some(x) = args.quat { builder.add_quat(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> BoneType {
    self._tab.get::<BoneType>(BonePose::VT_ID, Some(BoneType::Head)).unwrap()
  }
  #[inline]
  pub fn quat(&self) -> Option<&'a Quat> {
    self._tab.get::<Quat>(BonePose::VT_QUAT, None)
  }
  #[inline]
  pub fn pos(&self) -> Option<&'a Vec3f> {
    self._tab.get::<Vec3f>(BonePose::VT_POS, None)
  }
}

impl flatbuffers::Verifiable for BonePose<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<BoneType>("id", Self::VT_ID, false)?
     .visit_field::<Quat>("quat", Self::VT_QUAT, false)?
     .visit_field::<Vec3f>("pos", Self::VT_POS, false)?
     .finish();
    Ok(())
  }
}
pub struct BonePoseArgs<'a> {
    pub id: BoneType,
    pub quat: Option<&'a Quat>,
    pub pos: Option<&'a Vec3f>,
}
impl<'a> Default for BonePoseArgs<'a> {
  #[inline]
  fn default() -> Self {
    BonePoseArgs {
      id: BoneType::Head,
      quat: None,
      pos: None,
    }
  }
}

pub struct BonePoseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BonePoseBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: BoneType) {
    self.fbb_.push_slot::<BoneType>(BonePose::VT_ID, id, BoneType::Head);
  }
  #[inline]
  pub fn add_quat(&mut self, quat: &Quat) {
    self.fbb_.push_slot_always::<&Quat>(BonePose::VT_QUAT, quat);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &Vec3f) {
    self.fbb_.push_slot_always::<&Vec3f>(BonePose::VT_POS, pos);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BonePoseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BonePoseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BonePose<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for BonePose<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("BonePose");
      ds.field("id", &self.id());
      ds.field("quat", &self.quat());
      ds.field("pos", &self.pos());
      ds.finish()
  }
}
