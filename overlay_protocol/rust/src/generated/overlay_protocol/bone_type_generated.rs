// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BONE_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BONE_TYPE: u8 = 16;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BONE_TYPE: [BoneType; 17] = [
  BoneType::Head,
  BoneType::Neck,
  BoneType::Chest,
  BoneType::Waist,
  BoneType::Hip,
  BoneType::ThighL,
  BoneType::ThighR,
  BoneType::AnkleL,
  BoneType::AnkleR,
  BoneType::FootL,
  BoneType::FootR,
  BoneType::WristL,
  BoneType::WristR,
  BoneType::ForeArmL,
  BoneType::ForeArmR,
  BoneType::UpperArmL,
  BoneType::UpperArmR,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BoneType(pub u8);
#[allow(non_upper_case_globals)]
impl BoneType {
  pub const Head: Self = Self(0);
  pub const Neck: Self = Self(1);
  pub const Chest: Self = Self(2);
  pub const Waist: Self = Self(3);
  pub const Hip: Self = Self(4);
  pub const ThighL: Self = Self(5);
  pub const ThighR: Self = Self(6);
  pub const AnkleL: Self = Self(7);
  pub const AnkleR: Self = Self(8);
  pub const FootL: Self = Self(9);
  pub const FootR: Self = Self(10);
  pub const WristL: Self = Self(11);
  pub const WristR: Self = Self(12);
  pub const ForeArmL: Self = Self(13);
  pub const ForeArmR: Self = Self(14);
  pub const UpperArmL: Self = Self(15);
  pub const UpperArmR: Self = Self(16);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 16;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Head,
    Self::Neck,
    Self::Chest,
    Self::Waist,
    Self::Hip,
    Self::ThighL,
    Self::ThighR,
    Self::AnkleL,
    Self::AnkleR,
    Self::FootL,
    Self::FootR,
    Self::WristL,
    Self::WristR,
    Self::ForeArmL,
    Self::ForeArmR,
    Self::UpperArmL,
    Self::UpperArmR,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Head => Some("Head"),
      Self::Neck => Some("Neck"),
      Self::Chest => Some("Chest"),
      Self::Waist => Some("Waist"),
      Self::Hip => Some("Hip"),
      Self::ThighL => Some("ThighL"),
      Self::ThighR => Some("ThighR"),
      Self::AnkleL => Some("AnkleL"),
      Self::AnkleR => Some("AnkleR"),
      Self::FootL => Some("FootL"),
      Self::FootR => Some("FootR"),
      Self::WristL => Some("WristL"),
      Self::WristR => Some("WristR"),
      Self::ForeArmL => Some("ForeArmL"),
      Self::ForeArmR => Some("ForeArmR"),
      Self::UpperArmL => Some("UpperArmL"),
      Self::UpperArmR => Some("UpperArmR"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for BoneType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BoneType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for BoneType {
    type Output = BoneType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for BoneType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BoneType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BoneType {}
