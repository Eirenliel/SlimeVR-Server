// automatically generated by the FlatBuffers compiler, do not modify

package overlay_protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Directionality is from perspective of server
 */
@SuppressWarnings("unused")
public final class OutboundPacket extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static OutboundPacket getRootAsOutboundPacket(ByteBuffer _bb) { return getRootAsOutboundPacket(_bb, new OutboundPacket()); }
  public static OutboundPacket getRootAsOutboundPacket(ByteBuffer _bb, OutboundPacket obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OutboundPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public overlay_protocol.BonePose bones(int j) { return bones(new overlay_protocol.BonePose(), j); }
  public overlay_protocol.BonePose bones(overlay_protocol.BonePose obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bonesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public overlay_protocol.BonePose.Vector bonesVector() { return bonesVector(new overlay_protocol.BonePose.Vector()); }
  public overlay_protocol.BonePose.Vector bonesVector(overlay_protocol.BonePose.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createOutboundPacket(FlatBufferBuilder builder,
      int bonesOffset) {
    builder.startTable(1);
    OutboundPacket.addBones(builder, bonesOffset);
    return OutboundPacket.endOutboundPacket(builder);
  }

  public static void startOutboundPacket(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addBones(FlatBufferBuilder builder, int bonesOffset) { builder.addOffset(0, bonesOffset, 0); }
  public static int createBonesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBonesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endOutboundPacket(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OutboundPacket get(int j) { return get(new OutboundPacket(), j); }
    public OutboundPacket get(OutboundPacket obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public OutboundPacketT unpack() {
    OutboundPacketT _o = new OutboundPacketT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(OutboundPacketT _o) {
    overlay_protocol.BonePoseT[] _oBones = new overlay_protocol.BonePoseT[bonesLength()];
    for (int _j = 0; _j < bonesLength(); ++_j) {_oBones[_j] = (bones(_j) != null ? bones(_j).unpack() : null);}
    _o.setBones(_oBones);
  }
  public static int pack(FlatBufferBuilder builder, OutboundPacketT _o) {
    if (_o == null) return 0;
    int _bones = 0;
    if (_o.getBones() != null) {
      int[] __bones = new int[_o.getBones().length];
      int _j = 0;
      for (overlay_protocol.BonePoseT _e : _o.getBones()) { __bones[_j] = overlay_protocol.BonePose.pack(builder, _e); _j++;}
      _bones = createBonesVector(builder, __bones);
    }
    return createOutboundPacket(
      builder,
      _bones);
  }
}

